/* src/graph/GraphPath.svelte generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import { start, slice } from "../stores.js";
import { onMount } from "../_snowpack/pkg/svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (39:4) {:else}
function create_else_block(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "empty paths";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (35:4) {#each paths as path}
function create_each_block(ctx) {
	let div;
	let t0_value = /*path*/ ctx[6].map(/*func*/ ctx[4]).join(" > ") + "";
	let t0;
	let t1;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*paths, $slice*/ 6 && t0_value !== (t0_value = /*path*/ ctx[6].map(/*func*/ ctx[4]).join(" > ") + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div1;
	let div0;
	let t1;
	let span;
	let t2;
	let t3_value = /*$start*/ ctx[0].slice(-/*$slice*/ ctx[2]) + "";
	let t3;
	let t4;
	let div2;
	let each_value = /*paths*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let each_1_else = null;

	if (!each_value.length) {
		each_1_else = create_else_block(ctx);
	}

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			div0.textContent = "Graph path";
			t1 = space();
			span = element("span");
			t2 = text("start: ");
			t3 = text(t3_value);
			t4 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (each_1_else) {
				each_1_else.c();
			}

			attr(div0, "class", "text-lg");
			attr(div3, "class", "w-full");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div1);
			append(div1, div0);
			append(div1, t1);
			append(div1, span);
			append(span, t2);
			append(span, t3);
			append(div3, t4);
			append(div3, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			if (each_1_else) {
				each_1_else.m(div2, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$start, $slice*/ 5 && t3_value !== (t3_value = /*$start*/ ctx[0].slice(-/*$slice*/ ctx[2]) + "")) set_data(t3, t3_value);

			if (dirty & /*paths, $slice*/ 6) {
				each_value = /*paths*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;

				if (each_value.length) {
					if (each_1_else) {
						each_1_else.d(1);
						each_1_else = null;
					}
				} else if (!each_1_else) {
					each_1_else = create_else_block(ctx);
					each_1_else.c();
					each_1_else.m(div2, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div3);
			destroy_each(each_blocks, detaching);
			if (each_1_else) each_1_else.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $start;
	let $slice;
	component_subscribe($$self, start, $$value => $$invalidate(0, $start = $$value));
	component_subscribe($$self, slice, $$value => $$invalidate(2, $slice = $$value));
	let { graph } = $$props;
	let paths = [];

	/**
 * traverse the graph to discover all the path from any starting point
 */
	function traverse(node = graph[$start], path = []) {
		if (path.includes(node.id)) return path;
		path = [...path, node.id];

		let childPaths = node.children.map(c => {
			return traverse(graph[c], [...path]);
		}).flat();

		return path.length === 1
		? [...childPaths]
		: [path, ...childPaths];
	}

	const func = x => x.slice(-$slice);

	$$self.$$set = $$props => {
		if ("graph" in $$props) $$invalidate(3, graph = $$props.graph);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*graph, $start*/ 9) {
			$: $$invalidate(1, paths = graph && graph[$start] && traverse(graph[$start]) || []);
		}
	};

	return [$start, paths, $slice, graph, func];
}

class GraphPath extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { graph: 3 });
	}
}

export default GraphPath;