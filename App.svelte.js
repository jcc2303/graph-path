/* src/App.svelte generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_input_value,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out
} from "./_snowpack/pkg/svelte/internal.js";

import { onMount } from "./_snowpack/pkg/svelte.js";
import "./Tailwind.svelte.js";
import { project, start } from "./stores.js";
import ProjectGraph from "./graph/ProjectGraph.svelte.js";
import ExampleJson from "./project-idx.json.proxy.js";

function create_else_block_1(ctx) {
	let div;
	let t0;
	let input;
	let t1;
	let p;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			t0 = text("copy token:");
			input = element("input");
			t1 = space();
			p = element("p");
			p.textContent = "use demo";
			attr(input, "type", "text");
			attr(p, "class", "no-underline hover:underline cursor-pointer");
			attr(div, "class", "flex");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, input);
			set_input_value(input, /*token*/ ctx[0]);
			append(div, t1);
			append(div, p);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[3]),
					listen(p, "click", /*useDemo*/ ctx[2])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*token*/ 1 && input.value !== /*token*/ ctx[0]) {
				set_input_value(input, /*token*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (65:4) {#if token}
function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*$project*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (68:6) {:else}
function create_else_block(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "retrieving data...";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (66:6) {#if $project}
function create_if_block_1(ctx) {
	let projectgraph;
	let current;
	projectgraph = new ProjectGraph({});

	return {
		c() {
			create_component(projectgraph.$$.fragment);
		},
		m(target, anchor) {
			mount_component(projectgraph, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(projectgraph.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(projectgraph.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(projectgraph, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let header;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*token*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = element("div");
			header = element("header");
			if_block.c();
			attr(div, "class", "text-align-center antialiased w-full h-full p-4");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, header);
			if_blocks[current_block_type_index].m(header, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(header, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
		}
	};
}

const projectId = "-MA1551S-odms4rVbJ8A";
const subProjectId = "-MA1551S-odms4rVbJ8B";

function instance($$self, $$props, $$invalidate) {
	let $start;
	let $project;
	component_subscribe($$self, start, $$value => $$invalidate(4, $start = $$value));
	component_subscribe($$self, project, $$value => $$invalidate(1, $project = $$value));
	let token;
	set_store_value(start, $start = "-MA1551S-odms4rVbJ8K", $start);

	function useDemo() {
		set_store_value(project, $project = ExampleJson, $project);
		$$invalidate(0, token = "-");
	}

	function getProject() {
		const host = "backend.qa.fieldap.com";

		//const url = `https://legacyapi.qa.fieldap.com/API/v1.9/${projectId}`;
		const url = `https://${host}/API/v1.9/${projectId}`;

		const options = {
			credentials: "include",
			headers: {
				accept: "*/*",
				"accept-language": "en-GB,en;q=0.9,en-US;q=0.8,es;q=0.7",
				authorization: "",
				"cache-control": "no-cache",
				"only-active": "False",
				pragma: "no-cache",
				"sec-fetch-dest": "empty",
				"sec-fetch-mode": "cors",
				"sec-fetch-site": "same-site",
				token
			},
			referrer: "https://apidocs.fieldap.com/",
			referrerPolicy: "no-referrer-when-downgrade",
			body: null,
			method: "GET",
			mode: "cors"
		};

		fetch(`${url}/subProject/${subProjectId}`, options).then(response => response.json()).then(json => set_store_value(project, $project = json, $project));
	}

	/* call demo for dev mode useDemo() */
	onMount(() => {
		
	});

	function input_input_handler() {
		token = this.value;
		$$invalidate(0, token);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$project, token*/ 3) {
			// $start = '-MA1551S-odms4rVbJ8V'
			// $: debugger;
			$: if (!$project && token) {
				getProject();
			}
		}
	};

	return [token, $project, useDemo, input_input_handler];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;